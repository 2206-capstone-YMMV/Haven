{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{Platform}from'expo-modules-core';import ExpoLocation from\"./ExpoLocation\";import{LocationAccuracy}from\"./Location.types\";import{LocationSubscriber}from\"./LocationSubscribers\";export function installWebGeolocationPolyfill(){if(Platform.OS!=='web'){if(!('window'in global)){global.window=global;}if(!('navigator'in global.window)){global.window.navigator={};}window.navigator.geolocation={getCurrentPosition:getCurrentPosition,watchPosition:watchPosition,clearWatch:clearWatch,stopObserving:function stopObserving(){}};}}function convertGeolocationOptions(options){return{accuracy:options.enableHighAccuracy?LocationAccuracy.High:LocationAccuracy.Balanced};}function getCurrentPosition(success){var error=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(){};var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_getCurrentPositionAsyncWrapper(success,error,options);}function _getCurrentPositionAsyncWrapper(_x,_x2,_x3){return _getCurrentPositionAsyncWrapper2.apply(this,arguments);}function _getCurrentPositionAsyncWrapper2(){_getCurrentPositionAsyncWrapper2=_asyncToGenerator(function*(success,error,options){try{yield ExpoLocation.requestPermissionsAsync();var result=yield ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));success(result);}catch(e){error(e);}});return _getCurrentPositionAsyncWrapper2.apply(this,arguments);}function watchPosition(success,error,options){var watchId=LocationSubscriber.registerCallback(success);ExpoLocation.watchPositionImplAsync(watchId,options).catch(function(err){LocationSubscriber.unregisterCallback(watchId);error({watchId:watchId,message:err.message,code:err.code});});return watchId;}function clearWatch(watchId){LocationSubscriber.unregisterCallback(watchId);}","map":{"version":3,"mappings":"uEAAA,OAASA,QAAT,KAAyB,mBAAzB,CAEA,MAAOC,aAAP,sBACA,OAAyBC,gBAAzB,wBACA,OAASC,kBAAT,6BAeA,MAAM,SAAUC,8BAAV,EAAuC,CAC3C,GAAIJ,QAAQ,CAACK,EAAT,GAAgB,KAApB,CAA2B,CAEzB,GAAI,EAAE,UAAYC,OAAd,CAAJ,CAA2B,CACzBA,MAAM,CAACC,MAAP,CAAgBD,MAAhB,CACD,CACD,GAAI,EAAE,aAAeA,OAAM,CAACC,MAAxB,CAAJ,CAAqC,CACnCD,MAAM,CAACC,MAAP,CAAcC,SAAd,CAA0B,EAA1B,CACD,CAGDD,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA+B,CAC7BC,kBAAkB,CAAlBA,kBAD6B,CAE7BC,aAAa,CAAbA,aAF6B,CAG7BC,UAAU,CAAVA,UAH6B,CAO7BC,aAAa,CAAE,wBAAK,CAAG,CAPM,CAA/B,CASD,CACF,CAED,QAASC,0BAAT,CAAmCC,OAAnC,CAA8D,CAC5D,MAAO,CACLC,QAAQ,CAAED,OAAO,CAACE,kBAAR,CAA6Bf,gBAAgB,CAACgB,IAA9C,CAAqDhB,gBAAgB,CAACiB,QAD3E,CAAP,CAGD,CAED,QAAST,mBAAT,CACEU,OADF,CAGkC,IADhCC,MACgC,2DADE,UAAK,CAAG,CACV,IAAhCN,QAAgC,2DAAF,EAAE,CAEhCO,+BAA+B,CAACF,OAAD,CAAUC,KAAV,CAAiBN,OAAjB,CAA/B,CACD,C,QAIcO,gC,2KAAf,UACEF,OADF,CAEEC,KAFF,CAGEN,OAHF,CAG6B,CAE3B,GAAI,CACF,KAAMd,aAAY,CAACsB,uBAAb,EAAN,CACA,GAAMC,OAAM,MAASvB,aAAY,CAACwB,uBAAb,CAAqCX,yBAAyB,CAACC,OAAD,CAA9D,CAArB,CACAK,OAAO,CAACI,MAAD,CAAP,CACD,CAAC,MAAOE,CAAP,CAAU,CACVL,KAAK,CAACK,CAAD,CAAL,CACD,CACF,C,iEAGD,QAASf,cAAT,CACES,OADF,CAEEC,KAFF,CAGEN,OAHF,CAG6B,CAE3B,GAAMY,QAAO,CAAGxB,kBAAkB,CAACyB,gBAAnB,CAAoCR,OAApC,CAAhB,CAEAnB,YAAY,CAAC4B,sBAAb,CAAoCF,OAApC,CAA6CZ,OAA7C,EAAsDe,KAAtD,CAA4D,SAACC,GAAD,CAAQ,CAClE5B,kBAAkB,CAAC6B,kBAAnB,CAAsCL,OAAtC,EACAN,KAAK,CAAC,CAAEM,OAAO,CAAPA,OAAF,CAAWM,OAAO,CAAEF,GAAG,CAACE,OAAxB,CAAiCC,IAAI,CAAEH,GAAG,CAACG,IAA3C,CAAD,CAAL,CACD,CAHD,EAKA,MAAOP,QAAP,CACD,CAGD,QAASf,WAAT,CAAoBe,OAApB,CAAmC,CACjCxB,kBAAkB,CAAC6B,kBAAnB,CAAsCL,OAAtC,EACD","names":["Platform","ExpoLocation","LocationAccuracy","LocationSubscriber","installWebGeolocationPolyfill","OS","global","window","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","stopObserving","convertGeolocationOptions","options","accuracy","enableHighAccuracy","High","Balanced","success","error","_getCurrentPositionAsyncWrapper","requestPermissionsAsync","result","getCurrentPositionAsync","e","watchId","registerCallback","watchPositionImplAsync","catch","err","unregisterCallback","message","code"],"sourceRoot":"","sources":["../src/GeolocationPolyfill.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\ndeclare const global: any;\n\n// @needsAudit\n/**\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\n */\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Make sure `window.navigator` is defined in the global scope.\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"]},"metadata":{},"sourceType":"module"}