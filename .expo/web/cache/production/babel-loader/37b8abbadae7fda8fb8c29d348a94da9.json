{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import ExpoLocation from\"./ExpoLocation\";import{LocationEventEmitter}from\"./LocationEventEmitter\";var nextWatchId=0;var Subscriber=function(){function Subscriber(eventName,eventDataField){_classCallCheck(this,Subscriber);this.callbacks={};this.eventSubscription=null;this.eventName=eventName;this.eventDataField=eventDataField;}_createClass(Subscriber,[{key:\"maybeInitializeSubscription\",value:function maybeInitializeSubscription(){var _this=this;if(this.eventSubscription){return;}this.eventSubscription=LocationEventEmitter.addListener(this.eventName,function(event){return _this.trigger(event);});}},{key:\"registerCallback\",value:function registerCallback(callback){this.maybeInitializeSubscription();var id=++nextWatchId;this.callbacks[id]=callback;return id;}},{key:\"unregisterCallback\",value:function unregisterCallback(id){if(!this.callbacks[id]){return;}delete this.callbacks[id];ExpoLocation.removeWatchAsync(id);if(Object.keys(this.callbacks).length===0&&this.eventSubscription){LocationEventEmitter.removeSubscription(this.eventSubscription);this.eventSubscription=null;}}},{key:\"trigger\",value:function trigger(event){var watchId=event.watchId;var callback=this.callbacks[watchId];if(callback){callback(event[this.eventDataField]);}else{ExpoLocation.removeWatchAsync(watchId);}}}]);return Subscriber;}();export var LocationSubscriber=new Subscriber('Expo.locationChanged','location');export var HeadingSubscriber=new Subscriber('Expo.headingChanged','heading');export function _getCurrentWatchId(){return nextWatchId;}","map":{"version":3,"mappings":"gIAEA,MAAOA,aAAP,sBAEA,OAASC,oBAAT,8BAOA,GAAIC,YAAW,CAAG,CAAlB,C,GAEMC,W,YAMJ,oBAAYC,SAAZ,CAA+BC,cAA/B,CAAqD,uCAH7CC,SAG6C,CAHD,EAGC,MAF7CC,iBAE6C,CAFJ,IAEI,CACnD,KAAKH,SAAL,CAAiBA,SAAjB,CACA,KAAKC,cAAL,CAAsBA,cAAtB,CACD,C,kEAED,sCAA2B,gBACzB,GAAI,KAAKE,iBAAT,CAA4B,CAC1B,OACD,CACD,KAAKA,iBAAL,CAAyBN,oBAAoB,CAACO,WAArB,CACvB,KAAKJ,SADkB,CAEvB,SAACK,KAAD,QAAwB,MAAI,CAACC,OAAL,CAAaD,KAAb,CAAxB,EAFuB,CAAzB,CAID,C,gCAKD,0BAAiBE,QAAjB,CAAuC,CACrC,KAAKC,2BAAL,GACA,GAAMC,GAAE,CAAG,EAAEX,WAAb,CACA,KAAKI,SAAL,CAAeO,EAAf,EAAqBF,QAArB,CACA,MAAOE,GAAP,CACD,C,kCAKD,4BAAmBA,EAAnB,CAA6B,CAE3B,GAAI,CAAC,KAAKP,SAAL,CAAeO,EAAf,CAAL,CAAyB,CACvB,OACD,CAED,MAAO,MAAKP,SAAL,CAAeO,EAAf,CAAP,CACAb,YAAY,CAACc,gBAAb,CAA8BD,EAA9B,EAEA,GAAIE,MAAM,CAACC,IAAP,CAAY,KAAKV,SAAjB,EAA4BW,MAA5B,GAAuC,CAAvC,EAA4C,KAAKV,iBAArD,CAAwE,CACtEN,oBAAoB,CAACiB,kBAArB,CAAwC,KAAKX,iBAA7C,EACA,KAAKA,iBAAL,CAAyB,IAAzB,CACD,CACF,C,uBAED,iBAAQE,KAAR,CAA0B,CACxB,GAAMU,QAAO,CAAGV,KAAK,CAACU,OAAtB,CACA,GAAMR,SAAQ,CAAG,KAAKL,SAAL,CAAea,OAAf,CAAjB,CAEA,GAAIR,QAAJ,CAAc,CACZA,QAAQ,CAACF,KAAK,CAAC,KAAKJ,cAAN,CAAN,CAAR,CACD,CAFD,IAEO,CACLL,YAAY,CAACc,gBAAb,CAA8BK,OAA9B,EACD,CACF,C,0BAGH,MAAO,IAAMC,mBAAkB,CAAG,GAAIjB,WAAJ,CAChC,sBADgC,CAEhC,UAFgC,CAA3B,CAIP,MAAO,IAAMkB,kBAAiB,CAAG,GAAIlB,WAAJ,CAC/B,qBAD+B,CAE/B,SAF+B,CAA1B,CAQP,MAAM,SAAUmB,mBAAV,EAA4B,CAChC,MAAOpB,YAAP,CACD","names":["ExpoLocation","LocationEventEmitter","nextWatchId","Subscriber","eventName","eventDataField","callbacks","eventSubscription","addListener","event","trigger","callback","maybeInitializeSubscription","id","removeWatchAsync","Object","keys","length","removeSubscription","watchId","LocationSubscriber","HeadingSubscriber","_getCurrentWatchId"],"sourceRoot":"","sources":["../src/LocationSubscribers.ts"],"sourcesContent":["import { Subscription } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: Subscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * @private Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"]},"metadata":{},"sourceType":"module"}